/*
 * Copyright (c) 2018-2022 Vikash Madhow
 */

/**
 *                      .__
 *    ____   ___________|  |
 *  _/ __ \ /  ___/ ____/  |
 *  \  ___/ \___ < <_|  |  |__
 *   \___  >____  >__   |____/
 *       \/     \/   |__|
 *
 * @author Vikash Madhow (vikash.madhow@gmail.com)
 */

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
  }
}

plugins {
  id "antlr"
  id "java-library"
  id "maven-publish"
  id "signing"
  id "io.codearte.nexus-staging" version "0.22.0"
  id "synapticloop.projectFilestatistics" version "1.1.0"
}

repositories {
  mavenLocal()
  mavenCentral()
//  maven {
//    url = uri("http://maven.cubrid.org/")
//  }
}

generateGrammarSource {
  outputDirectory = file("src/main/antlr")
  arguments += ["-long-messages"]
}

sourceSets {
  main {
    java { srcDirs = ['src/main/java', 'src/main/antlr'] }
    resources { srcDirs = ['src/main/resources'] }
  }
  test {
    java { srcDirs = ['src/test/java', 'src/test/antlr'] }
    resources { srcDirs = ['src/test/resources'] }
  }
}

java {
  modularity.inferModulePath = true
  withJavadocJar()
  withSourcesJar()
}

version = "1.0.6"
group = 'ma.vi'
sourceCompatibility = JavaVersion.VERSION_17

project.ext {
  moduleName = project.group + '.' + project.name
  isReleaseVersion = !version.endsWith("SNAPSHOT")
}

jar {
  inputs.property("moduleName", project.moduleName)
  manifest {
    attributes('Automatic-Module-Name': project.moduleName)
  }
}

java {
  withJavadocJar()
  withSourcesJar()
}

projectFilestatistics {
  // the files to include in the generation of the statistics
  includes = ["src/main/**/*.*"]

  // the files to exclude from the generation
  excludes = [
      "**/*.woff*",
      "**/*.babelrc",
      "**/*.editorconfig",
      "**/*.eot",
      "**/*.eslintignore",
      "**/*.gif",
      "**/*.ico",
      "**/*.interp",
      "**/*.jpg",
      "**/*.json",
      "**/*.keep",
      "**/*.map",
      "**/*.orig",
      "**/*.otf",
      "**/*.png",
      "**/*.svg",
      "**/*.tokens",
      "**/*.ttf",
  ]

  // the output directory for the generated statistics
  outputDirectory = 'src/docs'

  // if you require to over-ride how single and multi-line comments work, or
  // need to add in some extensions which aren't built in...
  // propertyFile = 'over-ride.properties'
}

dependencies {
  antlr("org.antlr:antlr4:4.10.1")

  api("org.pcollections:pcollections:3.1.4")
  api("ma.vi:base:latest.release")
  api("org.json:json:latest.release")

  api("org.postgresql:postgresql:42.3.6")
  api("com.microsoft.sqlserver:mssql-jdbc:10.2.1.jre17")

  implementation("org.mariadb.jdbc:mariadb-java-client:2.7.3")
  implementation("mysql:mysql-connector-java:8.0.25")
  implementation("org.hsqldb:hsqldb:2.6.1")
  implementation("com.zaxxer:HikariCP:5.0.1")

  implementation("org.apache.commons:commons-lang3:latest.release")
  implementation("org.yaml:snakeyaml:latest.release")

  // Use JUnit test framework
  testImplementation(platform("org.junit:junit-bom:5.8.2"))
  testImplementation("org.junit.jupiter:junit-jupiter:5.8.2")
  testImplementation("org.hamcrest:hamcrest:2.2")
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
  jvmArgs("--enable-preview")
}

tasks.withType(Jar) {
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

compileJava {
  doFirst {
    options.compilerArgs = ['--enable-preview']
  }
}

//compileJava {
//  inputs.property("moduleName", 'ma.vi.esql')
//  doFirst {
//    // println("Classpath: " + classpath.asPath)
//    options.compilerArgs = [
//        '--module-path', classpath.asPath,
//        '--add-exports', 'org.hsqldb/org.hsqldb=ma.vi.esql',
//    ]
//    classpath = files()
//  }
//}

publishing {
  repositories {
    maven {
      def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
      url = isReleaseVersion ? releaseRepo : snapshotRepo
      credentials {
        username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
        password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
      }
    }
  }

  publications {
    mavenJava(MavenPublication) {
      from components.java
      pom {
        groupId = 'ma.vi'
        artifactId = 'esql'
        name = "ESQL language implementation"
        description = 'ESQL, SQL enhanced with metadata compiling to various relational databases'
        url = 'https://github.com/vikashmadhow/esql'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        developers {
          developer {
            id = "vikashmadhow"
            name = "Vikash Madhow"
            email = "vikash.madhow@gmail.com"
            url = "http://vikmad.com"
          }
        }
        scm {
          url = 'https://github.com/vikashmadhow/esql'
          connection = 'scm:https://github.com/vikashmadhow/esql.git'
          developerConnection = 'scm:git://github.com/vikashmadhow/esql.git'
        }
      }
    }
  }
}

signing {
  sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
  onlyIf { isReleaseVersion }
}

//nexusStaging {
//  packageGroup = group
//  username = project.getProperty('ossrhUsername')
//  password = project.getProperty('ossrhPassword')
//}
